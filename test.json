{
	"info": {
		"_postman_id": "5578851d-e492-486d-b815-7b5f558da4a7",
		"name": "CEP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24723965"
	},
	"item": [
		{
			"name": "consultacep",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function consultaCEP() {\r",
							"    var consultaCEP = [\"07176690\", \"18550001\"];\r",
							"\r",
							"    var randomItem = consultaCEP[Math.floor(Math.random() * consultaCEP.length)];\r",
							"    \r",
							"    return randomItem; \r",
							"}\r",
							"    \r",
							"pm.environment.set(\"Cep\", consultaCEP());\r",
							"\r",
							"pm.variables.set(\"schema\", {\r",
							"    // \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    // \"$ref\": \"#/definitions/Welcome3\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome3\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"cep\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"logradouro\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"complemento\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"bairro\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"localidade\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"uf\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"ibge\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"integer\"\r",
							"                },\r",
							"                \"gia\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"integer\"\r",
							"                },\r",
							"                \"ddd\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"integer\"\r",
							"                },\r",
							"                \"siafi\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"bairro\",\r",
							"                \"cep\",\r",
							"                \"complemento\",\r",
							"                \"ddd\",\r",
							"                \"gia\",\r",
							"                \"ibge\",\r",
							"                \"localidade\",\r",
							"                \"logradouro\",\r",
							"                \"siafi\",\r",
							"                \"uf\"\r",
							"            ],\r",
							"            \"title\": \"Welcome3\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"\r",
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"ResponseBody deve obedecer aos tipos do schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(pm.variables.get(\"schema\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validação dos Headers\", function(){\r",
							"    pm.response.to.have.header(\"Cache-Control\");\r",
							"    pm.response.to.have.header(\"Pragma\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\",\"*\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Methods\",\"GET\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Headers\").to.not.null\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Credentials\").to.not.null\r",
							"    pm.response.to.have.header(\"Access-Control-Max-Age\").to.not.null\r",
							"});\r",
							"\r",
							"function checkElementAttributes(element, attributes) {\r",
							"    var status = true;\r",
							"    var status2 = true;\r",
							"    for(var att in attributes) {\r",
							"        att = attributes[att];\r",
							"        status = element.hasOwnProperty(att);\r",
							"        if (!status) break;\r",
							"    }\r",
							"    if (status) {\r",
							"        for (var key in element) {\r",
							"            status2 = attributes.includes(key);\r",
							"            if (!status2) break;\r",
							"        }\r",
							"    }\r",
							"    if (status && status2) {\r",
							"        tests['O objeto retornado contem os campos informados'] = true;\r",
							"    } else {\r",
							"        if (!status) {\r",
							"            for(var att in attributes) {\r",
							"                att = attributes[att];\r",
							"                tests[`Verificando se o elemento contem o Atributo (${att})`] = element.hasOwnProperty(att);\r",
							"            }\r",
							"        } else {\r",
							"            for (var key in element) {\r",
							"                tests[`Verificando se o elemento contem o Atributo (${key})`] = attributes.includes(key);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"const   contrato =         [\r",
							"           \"cep\",\"logradouro\", \"complemento\", \"bairro\",\r",
							"            \"localidade\", \"uf\", \"ibge\",\"gia\",\"ddd\", \"siafi\"\r",
							"        ];\r",
							"\r",
							"pm.test(\"ResponseBody deve obedecer os campos do contrato\", () => {\r",
							"    checkElementAttributes(data,contrato);\r",
							"    });\r",
							"\r",
							"pm.test(\"Validação que o campo cep não deve ser null\", function () {\r",
							"    pm.expect(data.cep).to.not.null\r",
							"});\r",
							"\r",
							"pm.test(\"Validação presença do campo localidade no ResponseBody\", function () {\r",
							"    pm.expect(data.localidade).to.exist\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "viacep.com.br/ws/{{Cep}}/json/",
					"host": [
						"viacep",
						"com",
						"br"
					],
					"path": [
						"ws",
						"{{Cep}}",
						"json",
						""
					]
				}
			},
			"response": []
		}
	]
}